'''
/*
 * Arquivo: xmlGenerator
 * Direitos Autorais (C) 2025 Atos Aires Arruda
 *
 * Este programa é software livre; você pode redistribuí-lo e/ou modificá-lo
 * sob os termos da Licença Pública Geral GNU conforme publicada pela Free
 * Software Foundation; na versão 2 da Licença.
 *
 * Para mais detalhes, veja o arquivo LICENSE.
 */
'''

'''

[[[cog

	try:
		with open("federation.txt", "r") as arq:
			texto = arq.read()
			palavras = texto.split()
	except FileNotFoundError:
		print(f"Erro ao abrir arquivo")
	except Exception as e:
		print(f"Erro = {e}")

	def buildHeader():
		#Monta Cabecalho da federacao
		cog.outl("<?xml version='1.0' encoding='UTF-8'?>")
		cog.outl("<federation>")
		#Fim da montagem

	def buildFederation(palavras):
		if(palavras[0] != "Start>"):
			cog.error("ERRO: Construtor do cabeçalho da federação tem entrada incorreta")

		#Monta nome da federacao
		cog.out("	<federationName>")
		cog.out(palavras[1])
		cog.outl("</federationName>")
		#Fim da montagem

		#Monta tipo da federacao
		cog.out("	<federateType>")
		cog.out(palavras[2])
		cog.outl("</federateType>")	
		#Fim da montagem
		del palavras[0]
		del palavras[0]
		del palavras[0]


	def startBuildObject():
		#Monta Objeto
		cog.outl("	<objects>")

	def startBuildClass(palavras):
		if(palavras[0] != "cla>"):
			cog.erro("Erro: Construtor de class tem entrada incorreta")


		#Monta Classe
		cog.outl("		<objectClass")

		#Monta Name
		cog.out("			name='")
		cog.out(palavras[1])
		cog.outl("'")
		#Fim da montagem nome
		
		#Monta sharing
		cog.out("			sharing='")
		cog.out(palavras[2])
		cog.outl("'")
		#Fim da montagem sharing

		#Monta dimensions
		cog.out("			dimensions='")
		cog.out(palavras[3])
		cog.outl("'")
		#Fim da montagem dimensions

		#Monta dimensions
		cog.out("			isAbstract='")
		cog.out(palavras[4])
		cog.outl("'")
		#Fim da montagem isAbstract

		#Inserindo Atributo
		cog.outl("		>")

		del palavras[0]
		del palavras[0]
		del palavras[0]
		del palavras[0]
		del palavras[0]
		#Fim da montagem Classe

	def enterAttribute(palavras):
		if(palavras[0] != "atr>"):
			cog.error("Erro: Construtor de atributos tem entrada incorreta")

		#Monta Atributos
		cog.outl("			<attribute")
		cog.out("				name='")
		cog.out(palavras[1])
		cog.outl("'")

		cog.out("				dataType='")
		cog.out(palavras[2])
		cog.outl("'")

		cog.out("				ownership='")
		cog.out(palavras[3])
		cog.outl("'")

		cog.out("				updateRate='")
		cog.out(palavras[4])
		cog.outl("'")

		cog.out("				transportation='")
		cog.out(palavras[5])
		cog.outl("'")

		#Sinaliza fim da montagem dos atributos
		cog.outl("			/>")

		del palavras[0]
		del palavras[0]
		del palavras[0]
		del palavras[0]
		del palavras[0]
		del palavras[0]


	def finishBuildClass():
		cog.outl("		</objectClass>")
		cog.outl("	</objects>")
		#Fim da montagem Objeto

	def startBuildInterations():
		cog.outl("	<interactions>")

	def buildInteractions(palavras):
		if(palavras[0] != "int>"):
			cog.error("Erro: Construtor de interações tem entrada incorreta")

		cog.outl("		<interactionClass")

		#Monta Name
		cog.out("			name='")
		cog.out(palavras[1])
		cog.outl("'")
		#Fim da montagem nome
		
		#Monta sharing
		cog.out("			sharing='")
		cog.out(palavras[2])
		cog.outl("'")
		#Fim da montagem sharing

		#Monta dimensions
		cog.out("			dimensions='")
		cog.out(palavras[3])
		cog.outl("'")
		#Fim da montagem dimensions

		#Monta transportations
		cog.out("			transportation='")
		cog.out(palavras[4])
		cog.outl("'")
		#Fim da montagem transportation

		#Inserindo parametros
		cog.outl("		>")


		del palavras[0]
		del palavras[0]
		del palavras[0]
		del palavras[0]
		del palavras[0]
		#Fim da montagem da interação

	def enterParameter(palavras):
		if(palavras[0] != "par>"):
			cog.error("Erro: Construtor de parametro possui entrada incorreta")

		cog.outl("			<parameter")

		#Monta Name
		cog.out("			name='")
		cog.out(palavras[1])
		cog.outl("'")
		#Fim da montagem nome

		#Monta dataType
		cog.out("			dataType='")
		cog.out(palavras[2])
		cog.outl("'")
		#Fim da montagem dataType

		cog.outl("			/>")

		del palavras[0]
		del palavras[0]
		del palavras[0]

		#Fim do parametro

	def finishBuildInteractions():
		cog.outl("		</interactionClass>")
		cog.outl("	</interactions>")
		#Fim da insersão de interações

	
	
	buildHeader()
	buildFederation(palavras)
	startBuildObject()
	startBuildClass(palavras)
	while(palavras[0] == "atr>"):
		enterAttribute(palavras)
	finishBuildClass()
	startBuildInterations()
	while((palavras[0] == "int>") or (palavras[0] == "par>")):
		buildInteractions(palavras)
		while(palavras[0] == "par>"):
			enterParameter(palavras)
		finishBuildInteractions()




	#buildHeader()
	#buildFederation(federationName, typeFederetion)
	#startBuildObject()	
	#startBuildClass(nameObjectClass, typeSharing, typeDimensions, typeIsAbstract)

	
	#buildAttribute(nameAttribute, typeDataType, typeOwnership, typeUpdateRate, typeTransportation) #Insira quantos quiser
	#finishBuildClass()

	#startBuildInterations()
	#BuildInteractions(nameInteraction, typeSharing, typeDimensions, typeTransportation)
	
	#enterParameter(nameParameter, typeDataType) #Insira quantas quiser
	#finishBuildInteractions()


    
    
	

]]]
[[[end]]]
'''
